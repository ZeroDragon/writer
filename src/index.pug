-
  const menuItems = [
    ['article', 'New Draft'],
    ['save', 'Save'],
    ['upload_file', 'Open Draft'],
    ['{{sfx}}', '{{soundStatus}}'],
    ['{{theme}}', 'Toggle theme'],
    ['{{zenMode}}', '{{zenStatus}}'],
    ['spacer'],
    ['lock', 'Encryption'],
    ['help_outlined', 'Help'],
  ]
-
  const helpData = [
    ['S', 'Save Draft'],
    ['N', 'New Draft'],
    [0,'Regular text'],
    [1,'Heading 1'],
    [2,'Heading 2'],
    [3,'Align left'],
    [4,'Align center'],
    [5,'Align right'],
    [6,'Justify'],
  ]
doctype html
html(lang="en")
  head
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    link(rel="apple-touch-icon" sizes="180x180" href="assets/apple-touch-icon.png")
    link(rel="icon" type="image/png" sizes="32x32" href="assets/favicon-32x32.png")
    link(rel="icon" type="image/png" sizes="16x16" href="assets/favicon-16x16.png")
    link(rel="manifest" href="assets/site.webmanifest")
    meta(charset="UTF-8")
    title=process.env.AppName
    link(rel="stylesheet" href="app.css")
    link(rel="preconnect" href="https://fonts.googleapis.com")
    link(rel="preconnect" href="https://fonts.gstatic.com" crossorigin)
    link(href="https://fonts.googleapis.com/css2?family=Roboto+Mono:ital,wght@0,100..700;1,100..700&display=swap" rel="stylesheet")
    script(src="zero.js")
    script(src="encrypter.js")
  body#app: div(z-class="theme {{themeName}}")
    .app
      .sidebar
        ul
          for item in menuItems
            if item[0] === 'spacer'
              li: .item
            else
              li: .item(z:click=`${item[0]}`)
                span.icon.material-icons-outlined=item[0]
                span.label=item[1]
      .content#content(
        contentEditable="true"
        z:keyDown="createSound"
        z:keyUp="updateContent"
        z:click="tryZenMode"
        z-model="content"
      )
      .footer
        span words:&nbsp;
        span {{ wordCount }}
        span &nbsp;of&nbsp;
        input.wordset(
          z-model="goal"
          placeholder="Goal"
          name="wordGoal"
          z:blur="setWordGoal"
          autoComplete="off"
        )
        span &nbsp;-&nbsp;
        span(z:click="incrementTimeLeft")
          .icon.material-icons-outlined more_time
        input.timeset(
          z-model="timeGoal"
          placeholder="hh:mm:ss"
          z:blur="setTimeGoal"
          z:focus="startEditingTimeGoal"
          z:tick="tickTimeGoal"
          name="timeGoal"
          autoComplete="off"
        )
        span(z-if="timerIsRunning" z:click="resetTimeGoal")
          .icon.material-icons-outlined timer_off
    .modal(z-if="modal.visible")
      .modal-content
        .title {{ modal.title }}
        div.message {{ !modal.message }}
        .buttons
          for button in ['primary', 'secondary', 'warning']
            button(
              class=button
              z:click=`modal.buttons.${button}.action`
              z-if=`modal.buttons.${button}`
            ) {{ modal.buttons.#{button}.text }}
    #helpData(z-if="false")
      ul
        for desc in helpData
          li
            strong Alt (ctrl on mac) + #{desc[0]}
            |: #{desc[1]}
        li.
          <br/>Also any regular text editing shortcuts like<br/><strong>Ctrl + B</strong> for bold, <strong>Ctrl + I</strong> for italics, etc.
    #encrypt(z-if="false")
      #encryptInputs
        .txt If you set an encryption key and secret, your drafts will be encrypted in your browser before being saved to disk. You will need to provide the same key and secret to open your drafts again.
        .encryptInputs
          input(placeholder="Encryption Key" name="encryptionKey" autocomplete="off")
          input(placeholder="Encryption Secret" name="encryptionSecret" autocomplete="off")
          label
            input(type="checkbox" name="decryptOnCloseModal")
            | Decrypt current text?

    script(src="app.js")
    if process.env.NODE_ENV === 'development'
      script.
        document.write('<script src="http://'
          + (location.host || 'localhost').split(':')[0]
          + ':35729/livereload.js?snipver=1"></'
          + 'script>')
    .dragOverlay#dragOverlay: .drag-text Drop file to open draft
