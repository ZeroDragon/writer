-
  const menuItems = [
    ['article', 'New Draft'],
    ['save', 'Save'],
    ['upload_file', 'Open Draft'],
    ['{{sfx}}', '{{soundStatus}}'],
    ['{{theme}}', 'Toggle theme'],
    ['{{zenMode}}', '{{zenStatus}}'],
    ['{{lock}}', '{{lockdesc}}'],
    ['info', 'About'],
  ]
doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    title=process.env.AppName
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    include _socialmedia.pug
    link(rel="apple-touch-icon" sizes="180x180" href="assets/apple-touch-icon.png")
    link(rel="icon" type="image/png" sizes="32x32" href="assets/favicon-32x32.png")
    link(rel="icon" type="image/png" sizes="16x16" href="assets/favicon-16x16.png")
    link(rel="manifest" href="assets/site.webmanifest")
    link(rel="stylesheet" href="app.css")
    script(src="registerSW.js")
    script(src="zero.js")
    script(src="encrypter.js")
  body#app: div(z-class="theme {{themeName}}")
    .app
      div(z-class="savingIndicator {{savingStatus}}")
        span.icon.material-icons-outlined save
      div(z-class="sidebar {{writing}}")
        ul
          for item in menuItems
            if item[0] === 'spacer'
              li: .item
            else
              li: .item(z:click=`${item[0]}`)
                span.icon.material-icons-outlined=item[0]
                span.label=item[1]
      .content#content(
        z-contentEditable="!isEncrypted"
        z:keyDown="createSound"
        z:keyUp="updateContent"
        z:click="tryZenMode"
        z-model="content"
      )
      .footer
        span words:&nbsp;
        span {{ wordCount }}
        span &nbsp;of&nbsp;
        input.wordset(
          z-model="goal"
          placeholder="Goal"
          name="wordGoal"
          z:blur="setWordGoal"
          autoComplete="off"
        )
        span &nbsp;-&nbsp;
        span(z:click="incrementTimeLeft")
          .icon.material-icons-outlined more_time
        input.timeset(
          z-model="timeGoal"
          placeholder="hh:mm:ss"
          z:blur="setTimeGoal"
          z:focus="startEditingTimeGoal"
          z:tick="tickTimeGoal"
          name="timeGoal"
          autoComplete="off"
        )
        span(z-if="timerIsRunning" z:click="resetTimeGoal")
          .icon.material-icons-outlined timer_off
      div(z-class="toolBar {{writing}}")
        for cmd in ['format_h1', 'format_h2', 'format_paragraph','format_align_left', 'format_align_center', 'format_align_right', 'format_align_justify', 'zoom_in', 'zoom_out', 'search_check']
          button.toolButton(
            z:click=`${cmd}`
          )
            .icon.material-icons-outlined #{cmd}
    .modal(z-if="modal.visible")
      .modal-content
        .title {{ modal.title }}
        div.message {{ !modal.message }}
        .buttons
          for button in ['primary', 'secondary', 'warning']
            button(
              class=button
              z:click=`modal.buttons.${button}.action`
              z-if=`modal.buttons.${button}`
            ) {{ modal.buttons.#{button}.text }}
    #infoData(z-if="false")
      ul
        li.
          Writeros aims to be a minimal, distraction-free writing application that helps you focus on your writing.<br/><br/>
        li.warning Note:
        li.warning The developer is not responsible for any data loss.
        li This app is served as is, and while efforts are made to ensure data integrity, always keep backups of your important drafts.
        li All data is stored locally in your browser and on your device.
        li No data is sent to any server unless you explicitly choose to back up or share your drafts.
        li(style="text-align: right;").
          Made with â™¥ by Zero.
    #encrypt(z-if="false")
      #encryptInputs
        .txt If you set an encryption key and secret, your drafts will be encrypted in your browser before being saved to disk. You will need to provide the same key and secret to open your drafts again.
        .encryptInputs
          input(placeholder="Encryption Key" name="encryptionKey" autocomplete="off")
          input(placeholder="Encryption Secret" name="encryptionSecret" autocomplete="off")
          label
            input(type="checkbox" name="decryptOnCloseModal")
            | Decrypt current text?
        .error-message(style="display: none;")
          b Error while decrypting.
          br
          |Are you sure the key and secret are correct?
          br
          |Is the draft encrypted?

    script(src="app.js")
    if process.env.NODE_ENV === 'development'
      script(src="http://localhost:35729/livereload.js?snipver=1")
    .dragOverlay#dragOverlay: .drag-text Drop file to open draft
